        <infomodal 
            width="%%{self.root.root.width;;value-value/10}" 
            height="%%{self.root.root.height;;value-value/5}"
            top="%%{self.parent.parent.height;;value/20}"
            left="%%{self.parent.parent.width;;value/20}">
        
            <div>

            </div>
        </infomodal>        





<script id='inputarea' type='text/nametag'>

    width:"%%{window.width}",
    height:"%%{window.height-$('div.header_box').height()-105}"
    
    <div class='field_container'>
    
        <textarea class='input_desc'>
        </textarea>
        
        <textarea class='input_text'>
        </textarea>
        
        <infobutton class='infobutton_medium' style='top:-5px;left:-2px;' />
        
   </div>



<!--  Specific datasets calculated by and stored in the WordStatObject() will be displayed by clicking on 
      buttons that trigger the display of a pane. 
-->
<script id='statistics_results_ui' type='text/nametag'>

   __ready__:function(){

      var self = this;
      new PaneUI( this.named('data_display_panes') ).makeTabs( this.named('data_display_buttons') , 'highlighted' , 'selected' );
     
      var panes = self.named("data_display_panes")[0];
      
      self.jtag.register( panes, 'shown', function(){ 
         if(panes.shown.attr("name") == "one") 
            self.named('one').jtag().reload();
            alert('registered event'); 
            
      var jtarget = $('textarea.input_text');
      function resizeAndOverlayDataDisplayPane( jtarget ){
          alert(jtarget.attr('class'));
          $( 'div.data_display_pane' ).offset( jtarget.offset() ).width( jtarget.width() ).height( jtarget.height() );
      }
      resizeAndOverlayDataDisplayPane();
      $( 'div.data_display_pane' ).resize(function(){ resizeAndOverlayDataDisplayPane(); });
        
      });
   }

   <div>
   
      <!-- panes that show results stored in one of the attributes of the WordStatObject -->
      <div name='data_display_panes' class='data_display_panes'>
      
         <data_display_pane></data_display_pane>
         <data_display_pane></data_display_pane>
         <data_display_pane></data_display_pane>
         <data_display_pane></data_display_pane>
      
      </div>   
      
      <!-- buttons that toggle the panes -->
      <div name='data_display_buttons' class='data_display_buttons'>
      
          <data_button>
              label:'Next Sample',
              func_id:'next_sample',
              info_id:'about_the_samples'
          </data_button>
      
          <data_button>
              label:'Show Fnords',
              func_id:'show_fnords',
              info_id:'about_the_fnords'
          </data_button>
          
          <data_button>
              label:'Fnord Count',
              func_id:'fnord_count',
              info_id:'about_the_count'
          </data_button>
      
          <data_button>
              label:'Word Count',
              func_id:'word_count',
              info_id:'about_the_gross_count'
          </data_button>
      
          <data_button>
              label:'Fnord Curve',
              func_id:'about_the_curve',
              info_id:'about_the_curve'
          </data_button>

   </div>

</script>

<!-- this div will start hidden but it must be painted between the text areas and the application buttons --> 
<!-- this is the template for app panes that will be displayed when a app function button is pressed --> 
<script id='data_display_pane' type='text/nametag'>

    __ready__:function(){
       
    }
    
    
    <div class='infoinner'>  
        
    
        <closex />
    </div>
</script>

<!-- This template defines a button that calls application functions -->
<!-- It is tied by the JTag PaneUI to a  -->
<script id='data_button' type='text/nametag'>

    __ready__:function(){
        $(this).addClass('data_button_wrapper button_shadow');
        $(this).click(function(){
                alert('function button ' + this.obj.this_function +  ' clicked');
            }).mousedown(function(){
                $(this).removeClass('button_shadow');
            }).mouseup(function(){
                $(this).addClass('button_shadow');
            }).mouseout(function(){
                $(this).addClass('button_shadow');
        });
    }
   
    <div class='clickcover'></div>
    
    <div>
        {{= label}}
    </div>
          
    <infobutton class='infobutton_small infobutton_for_functions' />

</script>







<script id='closex' type='text/nametag'>

    __ready__:function(){
        var jthis = $(this);
        jthis.html('x');
        jthis.click(function(){
            jthis.parent().hide();
        });
    }
    
    <div class='clickcover'>
    </div>

</script>




    <!-- div>
        <inputarea></inputarea>
               
        <statistics_results_ui></statistics_results_ui>
        
        <div id='modal_document_cover' class='hidden'>
        </div>
        
        <div id='modal_info_dialog' class='hidden'>
            <div id='info_inner_scrollable'>
            </div>
        </div> 
    </div -->

















<body>

    <div class='jtag'>
        template:'page'
    </div>

    <div name='text_bank' class='hidden'>
    
        <div name='about_the_site'> 
            <big>About This Site</big
            
            <div>First formalized in 1974 by Lloyd DeMause, the discipline of <a href='http://en.wikipedia.org/wiki/Psychohistory'><i>psychohistory</i></a> traces its underpinnings back a century or more.<br /><br />  Combining sociology, psychology, and statistics; psychohistory attempts to reveal the unconscious motives behind political trends. Statistical analysis has traditionally been the most laborious part of the job.  The method demands painstaking reading of political speech and print journalism. The hypnotically boring passages must be stripped away, leaving only emotionally charged words and metaphors.  These are parsed into a coherent narrative of the unconscious mind. <br /><br />   The resulting passages and subsequent matrix analyses of theme repetition produce a quantifiable picture of a political atmosphere, not to mention a predictor of the nation's future. <br /><br /> At least in theory. The tenants and methodologies are extremely controversial.  Despite the success of its spin-off discipline, <i>psychobiography</i>, PH proper is usually dismissed as quackery by mainstream academics.<br /><br /> While not systematically complete, this web-based tool is designed to take some of the drudge work out of text analysis and allow both casual and serious students to test psychohistory's premise for themselves.<br /><br /> Click any of the <span id='about_the_name' class='infobutton button_shadow'>?</span> <button id='test_button' name='click me!' class='infobutton button_shadow' >HI</button>buttons to learn more about the tool.<br /><br /> 
            </div>
        </div>

        <div name='about_the_name'>  
            <big>About The Name</big>
            
            <div>
                There is no small overlap between psychohistory and speculative fiction.<br /><br />  The name itself is often confused with the imaginary field of psychohistory invented by Issac Asimov, which he made the central premise of his <a href='http://en.wikipedia.org/wiki/The_Foundation_Series'><i>Foundation</i></a> novels.  In these books, mathematician Hari Seldon and his successors use statistical models to predict the decline of a glactic empire. With thier analytical tools they struggle to save human civilization from a new dark age. Anyone familiar with DeMausian psychohistory can draw obvious parallels with the ambitions and methodods of the discipline. <br /><br /> In his dadist trilogy, <a href='http://en.wikipedia.org/wiki/Illuminatus'><i>Illuminatus!</i></a>, Robert Anton Wilson wrote about the psychologically-charged word <i>fnord</i>.<br /><br /> In Wilson's dystopia the general public was conditioned from childhood to suppress conscious awareness of the word when they encountered it in print. Nonetheless it inspired feelings of dread and confusion in the reader.  This effect was employed by leaders to manipulate the public into irrational enmities and empty consumerism. The word, Anton wrote, is not actually 'fnord' but it is used as a stand-in for real words the readers of his novel would not be able to percieve.<br /><br /> Again, it's easy to notice the similarity between psychohistory's phrases of unconscious emotional power and Anton Wilson's invisible words. <br /><br /> There is no indication within pshychohistory that these novels have influenced it. Likewise, they make no reference to DeMause. Instead it appears the same ideas have arisen independently.  Likely they are spontaneous outgrowths of psychological observations extant in modern consciousness.
            </div>
        </div>


        <div name='about_the_description'>
            <big>Join the Effort</big>
            
            <div>
                The Fnord!-O-Meter is not merley a tool for personal edification. It's also crowdsourcing science!<br /><br />  Every time you process text with a description in this field the data are sent anonymously to our server.  We add this to a larger set which is used to test the theory on a wider scale.  We kindly encourage you to contribute.  Your tests can lead to a better understanding of human behavior.<br /><br />  Your participation is, of course, entirely voluntary. If you wish your experiments to remain private simply leave this description field blank.  No data will be sent to our servers.<br /><br /> If you do choose to contribute, <b>If you wish to help, please enter the publication date of the text somewhere in the description</b>.  Just about any format will do.  You may omit the day if you do not know it.<br /><br /> You will see this popup the first three times you analyze some text without entering a description.  After that we stop nagging you.
            </div>
        </div>

        <div content='about_the_samples'> 
            <big>Example Texts</big>
            <div>
                These sample texts come from a database of U.S. presidential State of The Union addresses. </b><br /><br />Each time you click <b>Next Sample</b> the application will advance through the chronology. </b><br /><br /> Any analysis window you have open will update to reflect the new data.
            </div>
        </div>

        <div name='about_the_fnords'> 
            <big>Unconscious Meanings</big>
            
            <div>
                Some text here.  Discuss the textual analysis process, use a <pre>to quote demause on his fantasy analysis</pre>  of Reagan's speech. Link to about_the_fantasy div.
            </div>
        </div>

        <div name='about_the_count'> 
            <big>Emotive Word Count</big>
            
            <div>
                This function lets you see a quick tally of all emotive words in our dictionary that matched words in your text. </b><br /><br />It's a quick way to identify the weight that was given to specific emotional themes.
            </div>
        </div>
        

        <div name='about_the_gross_count'> 
            <big>Total Word Count</big>
            <div>
                Just a tally of all words in the text, excluding articles.
            </div>

        <div name='about_the_curve'>
            
            <big>About the Graph</big>
            
            <div>
                The library of emotive words is divided into four categories, corresponding to the four stages of <i>group fantasy </i>.  <br /><br /> This graph plots the distributiuon of these words in the input speech as a percentage of words from each category. <br /><br /> The <i>x</i> axis represents the percentage. The <i>y</i> axis does not represent any data, just the order of the categories.
            </div>
        </div>

    </div>

   <!--
      This div covers the screen when Javascript fails or the user has it turned off. 
      It must be the last element in <body>
   -->
       <div class='no_script'>
           <div class='clickcover'></div>
               <div>
                   &nbsp;GREETINGS, NETZIEN!
               </div>
               <div>
                   &nbsp;THIS WEB APPLICATION REQUIRES JAVASCRIPT.
               </div>
               <div>
                   &nbsp;PLEASE ENABLE IT AND RESTART.
                </div>
                <div>
                    &nbsp;A&gt;<span style='font-size:30px;text-decoration:blink;'><blink>&#9646</blink></span>
                </div>



<!-- HTML of info buttons -->

    <div id='about_the_curve' class='infobutton button_shadow infobutton_small infobutton_for_functions'>
        <div class='clickcover'>
        </div>
        ?
    </div>


<!-- header infobutton, goes beneath the second inside div 

<div id='about_the_description' class='infobutton button_shadow infobutton_medium' style='top:-5px;left:-2px;'><div class='clickcover'></div>?</div> 

-->

<!-- HTML of info modal


    <div id='modal_document_cover'>
   </div>
   
   
<div id='modal_info_dialog'>
<div id='info_inner_scrollable'></div>
<div class='closex button_shadow'><div class='clickcover'></div>x</div>
</div>    
 
    
-->

<!-- HTML of a Function Button

    <div class='data_button_wrapper'>
        <div id='fnord_curve' class='data_button button_shadow'><div class='clickcover'></div>Fnord Curve</div>
        <infobutton name='about_the_curve' class='infobutton_small infobutton_for_functions' /> 
    </div>
    
-->
    
    
        
        console.log( $('div[class~="infomodalcontent",name="'+self.name+'"]').html() );
        
        $(infomodal).html( $('div[class~="infomodalcontent",name="'+self.name+'"]').html() );






















/*  
  eventually the relevant keywords can be moved from the 'fnords' variable to these.  
  then the WordStatObject() can be rewritten so that the fnords dictionary object is passed as the fist argument to the constructor.
  the final intent is to output a percentage value for each group found in the input text.  we could use a Raphaël object to draw a graph.
  if gf theory holds, we should get a nice sinusoidal curve with a peak at the current "fetal drama" stage.

fnordometer.fnords.strong     = "";
fnordometer.fnords.cracking   = "";
fnordometer.fnords.collapse   = "";
fnordometer.fnords.upheval    = "";
fnordometer.fnords.others     = "";

*/


/*

    ///////////////////////////////////////
   //                                   //
  //       Statistics Methods          //
 //                                   //
///////////////////////////////////////


        // Returns an object with the following properties
        //
        //  obj.filtered_input           An array of words from the input text matching words in the includes text.
        //  obj.include_frequencies      A dictionary of the above words and thier frequencies in the input text.
        //  obj.total_frequencies        A dictionary of all input text (miuns the excludes) 
        //        
//        function WordStatObject( includes, excludes, input ){
//
//            //Prepare for case-insensitive searches
//            var includes    = includes.toLowerCase(); 
//            var excludes    = excludes.toLowerCase();
//            var input       = input.toLowerCase();
//            
//
//            //Split text strings into arrays of words, dividing on whitespace and punctuation. This changes these from strings to arrays.
//            var delimiters  = new RegExp(/[^a-z]{1,}/);
//            includes    = includes.split(delimiters);
//            excludes    = excludes.split(delimiters);
//            input       = input.split(delimiters);	
//
//            //Strip away all excludes from input
//            var aa      = new Array;
//            for(var i = 0 ; i < input.length ; i++){
//                if(excludes.indexOf( input[i] ) < 0 )
//                    aa.push(input[i]);
//            }
//            input = aa;
//            aa = null;
//
//            //Base object which will be returned by this function
//            var a = new Object;
//
//            //Array of the input words, filtered by includes
//            a.filtered_input = new Array;
//            for(var i = 0 ; i < input.length ; i++)
//                if(includes.indexOf(input[i]) > -1 )
//                 a.filtered_input.push(input[i]);
//
//
//
//            //A function for sorting dictionary entries by thier value, highest first
//            function sortDictByValue(dictionary){
//                var sorting_array   = new Array;
//                
//                for(var i in dictionary){ //make an array of arrays: [[key:value],[key:value],...]
//                    sorting_array.push([ dictionary[String(i)] , String(i) ]);
//                }
//
//                sorting_array.sort(function compare(x, y){
//                    if ( x[0] == y[0] )
//                     return 0;
//                    else if ( x[0] < y[0] )
//                     return 1;
//                    else
//                     return -1;
//                });
//
//                dictionary  = {};
//                for( var i = 0; i <= sorting_array.length - 1; i++ ){                
//                    dictionary[sorting_array[i][1]]    = sorting_array[i][0];
//     
//                }
//                return dictionary;
//            }
//
//            //Dictionary of input word:frequency values, sorted highest to least
//            a.include_frequencies    = new Object;
//            for(var i in a.filtered_input){ 
//                if(a.include_frequencies[ a.filtered_input[i] ] == undefined)
//                    a.include_frequencies[ a.filtered_input[i] ] = 1;
//                else 
//                    a.include_frequencies[ a.filtered_input[i] ] =  a.include_frequencies[ a.filtered_input[i] ] +1 ;
//            }
//
//           a.include_frequencies = sortDictByValue(a.include_frequencies);//sort from highest to least
//
//            //Dictionary of total word:frequency values, minus the excludes
//            a.total_frequencies       = new Object;
//            for(var i in input)
//                if(a.total_frequencies[ input[i] ] == undefined)
//                    a.total_frequencies[ input[i] ] = 1;
//                else
//                    a.total_frequencies[ input[i] ] = a.total_frequencies[ input[i] ] +1;    
//
//           a.total_frequencies  = sortDictByValue(a.total_frequencies);
//        
//            //Return the Word Statistics Object
//            return a;                    
//        }
//
//
//
//       //Acessor function to parse the WordStatObject.total_frequencies into presentable HTML
//       function parseFrequencyResultsIntoHTML(stats_dictionary){
//            var t = '';
//            for( var i in stats_dictionary ){
//                t = t + '<div class="statistic_datum_wrapper">' + stats_dictionary[i] + '&nbsp;' + String(i) + '</div>'; 
//            }
//            return t;
//            };
//                   
       //Acessor function to parse the WordStatObject.total_frequencies into presentable HTML


       ///////////////////////////////////////
      //                                   //
     //       Initialization Events       //
    //                                   //
   //           Requires jQuery         //
  //                                   //
 ///////////////////////////////////////
 
//        //Varaible to hold the current item index of texts we've fetched from the samples[{'desc','text'}] array 
//        var samples_increment = 0;
//
//        //all On-Readys
//        $(document).ready(function(){
//            
//            //Hide the text_bank
//            //$('div[name="text_bank"]').hide(); 
//                // display:none; does the job in css.  
//                // this is essentially what the jQuery .hide()/.show() functions toggle anyway
//


////////////////////////////////  PRE JTAG CODE ////////////////////////////////////////

            //Create persistent jQuery objects that reference the info buttons and info popups.
            var info_divs = $('.infoouter');
            var infobuttons = $('.infobutton');
            
            //Create persistent jQuery objects that reference the function buttons and  popups.
            var data_display_buttons    = $('div.data_button');
//            var statistics_display  = $('div#statistics_display');
            
            
            //Hide all the info popups and give them state flags.
            info_divs.hide();
            info_divs.each( function(i){
                this.is_hidden = true;
            });
            
//            //Hide results panel
//            statistics_display.hide();
//            //Give it some attributes that hold its state
//            statistics_display[0].last_called_by = "nothing";
//            statistics_display[0].is_hidden = true;
            
            

            //Add click handlers to (x) div-buttons that .hide() thier container divs.
//            $('.closex').click(function(){
//                var container_div = $(this.parentNode);
//                container_div.hide();
//                container_div[0].is_hidden = true;  
//            });       
 
             
         
//            //Add click handlers to any button with .buttonshadow to cause a button-press visual effect
//            $('.buttonshadow').mousedown(function(){
//                var thisitem = $(this);
//                thisitem.removeClass('buttonshadow');
//            }).mouseup(function(){
//                $(this).addClass('buttonshadow');
//            }).mouseout(function(){
//                $(this).addClass('buttonshadow');
//            });
 
            //Make all links open in new windows
            $('a').each(function(){
                this.target = "_blank";
            });


            //Add click handlers to info buttons to toggle thier corresponding info popups.
            infobuttons.click(function(){
                
                var this_info_box = $( '#' + this.id + '.infoouter');
                var button_id = this.id;
                
                if(this_info_box[0].is_hidden){
                    // hide all other info boxes
                    info_divs.each(function(i){    
                        if( button_id != this.id && !this.is_hidden ){
                            this.is_hidden = true;
                            $(this).hide();
                        }                        
                    });
                    // and display the relevant one
                    this_info_box[0].is_hidden = false;
                    this_info_box.show();
                }
                else {
                    // dismiss it, leaving a clear view of the page
                    this_info_box[0].is_hidden = true;
                    this_info_box.hide();   
                }
             });

            //Function to set the text in the input boxes
            function setInputBoxesText( samples_increment ){
                $('textarea#input_desc').text( sample_texts[samples_increment]['desc'] );
                $('textarea#input_text').text( sample_texts[samples_increment]['text'] );
            }

            //Set text for initial pageload 
            setInputBoxesText( samples_increment );

            //Create a WordStatObject when the page is ready
            var fnord_stats = new WordStatObject( fnords , not_fnords , $("textarea#input_text").text() );           
                     
            //Create a callback to process the data again when the text in input_text has changed
            $("textarea#input_text").change(function(){
                fnord_stats = new WordStatObject( fnords , not_fnords , $("textarea#input_text").text() );
            });
            
            
//            // Func to set [1] the height of the tool interface areas, [2] The position of function buttons, dynamically
//            // on init, and also on page resize
//           function layoutDynamically(){
//                // get window and element dimension values, calculate
//                var jqwindow         = $(window);
//                var window_height   = jqwindow.height();
//                var window_width    = jqwindow.width();
//                var header_height   = $('div#header_box').height()
//                var items_height    = window_height - header_height - 120;
//                var jqinput_area    = $('div#input_area');
//                // set the height of the div containing the text boxes (the 'text' textarea expands to fill it )
//                jqinput_area.height( items_height ).width(window_width * 0.8 );
//                // calculate the position of the top function button, then an increment for each subsequent function button,
//                // based on a sizeable fraction of the overall window hieght, divided by the total number of buttons.
//                var data_button_wrappers = $('div.data_button_wrapper');
//                data_button_wrappers.each(function(i){
//                    var top_button_position = header_height + 125;//last number is an offset
//                    var poistion_increment = (window_height * 0.65) / data_button_wrappers.length;
//                    // set the position of each button group using css.  works because the wrapper's position:fixed;
//                    $(this).css('top', String( top_button_position + (poistion_increment * i) ) + 'px');    
//                });                  
//                // set the position and dimensions of the results pane
//                var input_text_box = $('textarea#input_text');
//                statistics_display.offset( input_text_box.offset() );
//                statistics_display.width( input_text_box.width() );
//                statistics_display.height( input_text_box.height() );
//            }


//            // do it once on ready()
//            layoutDynamically();
//            // add a callback to window.resize event.
//            $(window).resize(function(){ layoutDynamically(); });
 
 
            
//            //Add click handlers to info buttons to put thier corresponding results in the results box
//            data_display_buttons.click(function(){
//                
//                var this_id = this.id;
                
//                function showStatisticsPane( this_id, remember_button_id ){
//                    //Test to see which function button id was called, and then populate with relevant data
//                    if( this_id == 'show_fnords' )
//                        statistics_display.children('.infoinner').html( fnord_stats.filtered_input.join(' ') );
//                    else if( this_id == 'fnord_count' )
//                        statistics_display.children('.infoinner').html( parseFrequencyResultsIntoHTML(fnord_stats.include_frequencies) );
//                    else if( this_id == 'word_count' )
//                        statistics_display.children('.infoinner').html( parseFrequencyResultsIntoHTML(fnord_stats.total_frequencies) );
//                    else if( this_id == 'fnord_curve' )
//                        statistics_display.children('.infoinner').html( "placeholder for &lt;SVG&gt; graph elelement generated by Raphael" );

//                   // record the current stat item being displayed
//                   if(remember_button_id)
//                        statistics_display[0].last_called_by = this_id;
//                        
//                    if(statistics_display[0].is_hidden){
//                    //Make the statistics popup visible  
//                        statistics_display.show();
//                        statistics_display[0].is_hidden = false;
//                    }
//                }
                
//                if( this_id == 'next_sample' ){
//                
//                    samples_increment++;
//                    
//                    // if at the end of the samples db, loop back to the beginning
//                    if( samples_increment == sample_texts.length )   
//                        samples_increment = 0;
//                    // Paint the new text into the textarea#input_text
//                    setInputBoxesText( samples_increment );
//                    // trigger the textbox's change() event so a new wordStatObject() is made, with new data to display 
//                    $("textarea#input_text").trigger('change');
//                    //if the statistics popup isn't hidden
//                    if(!statistics_display[0].is_hidden)
//                        //update the statistics display pane's contents using the previous button argument, which now references new data
//                        showStatisticsPane( statistics_display[0].last_called_by , false );
//                }               
//                else 
//                    showStatisticsPane( this_id , true  );
//            });

            //document.write($("textarea#input_text").text());

            //document.write(fnord_stats.filtered_input.join(" ... "));

            //for( var i in fnord_stats.include_frequencies )
            //  document.write( fnord_stats.total_frequencies[i] + "&nbsp; &nbsp" + i + "<br>");  
            
            //Delete the big, window-covering div that will otherwise tell you to turn Javascript back on.


        });
    
*/
    
